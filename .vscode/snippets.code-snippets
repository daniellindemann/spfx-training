{
	"SPFX onInit": {
		"scope": "typescript",
		"prefix": "spfx-oninit",
		"body": [
			"protected onInit(): Promise<void> {",
			"    this.eventsService = Environment.type == EnvironmentType.Local ? new MockEventsService() : new SPEventsService(this.context, this.properties);",
			"",
			"    return Promise.resolve();",
			"  }"
		],
		"description": ""
	},
	"SPFX render": {
		"scope": "typescript",
		"prefix": "spfx-render",
		"body": [
			"public render(): void {",
			"    if(!this.properties.listname) {",
			"      this.context.statusRenderer.renderError(this.domElement, 'Configure the list that contains the event data via webpart properties.');",
			"      return;",
			"    }",
			"",
			"    this.eventsService.get()",
			"      .then((events) => {",
			"        Log.info('EventListWebPart', `Got ${events ? events.length : 0} events`, this.context.serviceScope);",
			"",
			"        const element: React.ReactElement<IEventListProps > = React.createElement(",
			"          EventList,",
			"          {",
			"            description: this.properties.description,",
			"            items: events,",
			"            eventsService: this.eventsService",
			"          }",
			"        );",
			"",
			"        ReactDom.render(element, this.domElement);",
			"      })",
			"      .catch((err) => {",
			"        this.context.statusRenderer.renderError(this.domElement, err.message ? err.message : 'Unable to get event data');",
			"        Log.warn('EventListWebPart', err.message, this.context.serviceScope);",
			"      });",
			"  }"
		],
		"description": ""
	},
	"SPFX Mock Event Items": {
		"scope": "typescript",
		"prefix": "spfx-mockeventitems",
		"body": [
			"private static Items: IEventItem[] = [",
			"    { ID: 1, Title: 'Event 01', StartDate: '2019-10-28T11:03:24Z', EndDate: '2019-10-28T12:03:24Z' },",
			"    { ID: 2, Title: 'Event 02', StartDate: '2019-11-02T15:47:06Z', EndDate: '2019-11-02T16:47:06Z' },",
			"    { ID: 3, Title: 'Event 03', StartDate: '2019-10-29T09:00:00Z', EndDate: '2019-10-29T10:00:00Z' },",
			"    { ID: 4, Title: 'An event with an very long long long long and special title', StartDate: '2019-11-05T18:24:17Z', EndDate: '2019-11-05T19:24:17Z' },",
			"    { ID: 5, Title: 'Global Office 365 Developer Bootcamp', StartDate: '2019-10-29T10:00:00Z', EndDate: '2019-10-29T17:00:00Z' }",
			"  ];"
		],
		"description": ""
	},
	"SPFX Html Table": {
		"scope": "typescriptreact",
		"prefix": "spfx-htmltable",
		"body": [
			"<table>",
			"              <tbody>",
			"                <tr>",
			"                  <th>Event</th>",
			"                  <th>Start Date</th>",
			"                  <th>End Date</th>",
			"                  <th>Join</th>",
			"                </tr>",
			"                {this.props.items &&",
			"                  this.props.items.map(item => {",
			"                    return (",
			"                      <tr key='{item.ID}'>",
			"                        <td>{item.Title}</td>",
			"                        <td>{format(new Date(item.StartDate as string), 'ccc, dd. MMMM yyyy hh:mm', { locale: de })}</td>",
			"                        <td>{format(new Date(item.EndDate as string), 'ccc, dd. MMMM yyyy hh:mm', { locale: de })}</td>",
			"                        <td><DefaultButton text=\"Join\" href={'/add/' + item.ID} onClick={ (e) => { e.preventDefault(); this.addToCalendar(item.ID); } } /></td>",
			"                      </tr>",
			"                    );",
			"                  })}",
			"              </tbody>",
			"            </table>"
		],
		"description": ""
	},
	"SPFX SP Query Options": {
		"scope": "typescript",
		"prefix": "spfx-spqueryoptions",
		"body": [
			"const selects = [",
			"      'ID',",
			"      'Title',",
			"      'StartDate',",
			"      'EndDate'",
			"    ];",
			"    const filters = [",
			"      `EndDate ge datetime'${new Date().toISOString()}'`",
			"    ];",
			"    const orders = [",
			"      `StartDate asc`",
			"    ];"
		],
		"description": ""
	},
	"SPFX SP Query": {
		"scope": "typescript",
		"prefix": "spfx-spquery",
		"body": [
			"this.context.spHttpClient.get(`${this.context.pageContext.web.absoluteUrl}/_api/web/lists/getbytitle('${this.options.listname}')/items?$select=${selects.join()}&$filter=${filters.join(' and ')}&$orderBy=${orders.join(',')}`, SPHttpClient.configurations.v1)",
			"        .then((res: SPHttpClientResponse) => {",
			"          return res.json();",
			"        })",
			"        .then((json) => {",
			"          if(json.error) {",
			"            reject(json.error);",
			"            return;",
			"          }",
			"",
			"          resolve(json.value as IEventItem[]);",
			"        });",
			"    });"
		],
		"description": ""
	},
	"SPFX SP Query String": {
		"scope": "typescript",
		"prefix": "spfx-spquerystring",
		"body": [
			"`${this.context.pageContext.web.absoluteUrl}/_api/web/lists/getbytitle('${this.options.listname}')/items?$select=${selects.join()}&$filter=${filters.join(' and ')}&$orderBy=${orders.join(',')}`"
		],
		"description": ""
	},
	"SPFX Graph Query": {
		"scope": "typescript",
		"prefix": "spfx-graphquery",
		"body": [
			"this.context.msGraphClientFactory.getClient()",
			"        .then((client) => {",
			"          client.api('me/events')",
			"            .version('v1.0')",
			"            .post({",
			"              subject: event.Title,",
			"              start: {",
			"                datetime: event.StartDate instanceof Date ? (event.StartDate as Date).toISOString() : event.StartDate,",
			"                timezone: 'UTC'",
			"              },",
			"              end: {",
			"                datetime: event.EndDate instanceof Date ? (event.EndDate as Date).toISOString() : event.EndDate,",
			"                timezone: 'UTC'",
			"              }",
			"            })",
			"            .then((res) => {",
			"              resolve(res);",
			"            })",
			"            .catch((err) => {",
			"              reject(err);",
			"            });",
			"        });"
		],
		"description": ""
	},
	"SPFX SP Events Service addEventToCalendar": {
		"scope": "typescript",
		"prefix": "spfx-addEventToCalendar",
		"body": [
			"public addEventToCalendar(event: IEventItem): Promise<any> {",
			"    return new Promise<any>((resolve, reject) => {",
			"      this.context.msGraphClientFactory.getClient()",
			"        .then((client) => {",
			"          client.api('me/events')",
			"            .version('v1.0')",
			"            .post({",
			"              subject: event.Title,",
			"              start: {",
			"                datetime: event.StartDate instanceof Date ? (event.StartDate as Date).toISOString() : event.StartDate,",
			"                timezone: 'UTC'",
			"              },",
			"              end: {",
			"                datetime: event.EndDate instanceof Date ? (event.EndDate as Date).toISOString() : event.EndDate,",
			"                timezone: 'UTC'",
			"              }",
			"            })",
			"            .then((res) => {",
			"              resolve(res);",
			"            })",
			"            .catch((err) => {",
			"              reject(err);",
			"            });",
			"        });",
			"    });",
			"  }"
		],
		"description": ""
	},
	"SPFX Web API Permissions": {
		"scope": "json",
		"prefix": "spfx-webapipermissions",
		"body": [
			"\"webApiPermissionRequests\": [",
			"      {",
			"        \"resource\": \"Microsoft Graph\",",
			"        \"scope\": \"User.ReadBasic.All\"",
			"      }",
			"      {",
			"        \"resource\": \"Microsoft Graph\",",
			"        \"scope\": \"Calendars.ReadWrite\"",
			"      }",
			"    ]"
		],
		"description": ""
	},
	"SPFX WebPack Bundle Analyzer": {
		"scope": "javascript",
		"prefix": "spfx-webpack-bundle-analyzer",
		"body": [
		 "build.configureWebpack.mergeConfig({",
		 "  additionalConfiguration: function(generatedConfiguration) {",
		 "    const lastDirName = path.basename(__dirname);",
		 "    const dropPath = path.join(__dirname, 'temp', 'stats');",
		 "    generatedConfiguration.plugins.push(new bundleAnalyzer.BundleAnalyzerPlugin({",
		 "      openAnalyzer: false,",
		 "      analyzerMode: 'static',",
		 "      reportFilename: path.join(dropPath, `${lastDirName}.stats.html`),",
		 "      generateStatsFile: true,",
		 "      statsFilename: path.join(dropPath, `${lastDirName}.stats.json`),",
		 "      logLevel: 'error'",
		 "    }));",
		 "",
		 "    return generatedConfiguration;",
		 "  }",
		 "});"
		],
		"description": "spfx webpack analyzer snippet for spfx gulpfile. 'path' and 'webpack-bundle-analyzer' must be imported."
	   }
}